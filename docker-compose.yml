version: '3.8'

services:
  werfplanning_api:
    container_name: werfplanning_api
    restart: unless-stopped
    build:
      context: ./werfplanning
      dockerfile: Dockerfile
    command: tail -f /dev/null  # Start de Flask-app
    ports:
      - "30001:5000"
    depends_on:
      - werfplanning_db
    environment:
      - FLASK_APP=/app/app.py
      - FLASK_ENV=development
      - DB_HOST=werfplanning_db
      - DB_PORT=3306
      - DB_DATABASE=werfplanningAPI
      - DB_USERNAME=werfplanning
      - DB_PASSWORD=werfplanningPwd
    volumes:
      - ./werfplanning/app:/app
    networks:
      - mynetwork  

  werfplanning_db:
    image: mariadb:10.6.19-focal
    container_name: werfplanning_db
    restart: unless-stopped
    environment:
      - MARIADB_DATABASE=werfplanningAPI
      - MARIADB_USER=werfplanning
      - MARIADB_PASSWORD=werfplanningPwd
      - MARIADB_ROOT_PASSWORD=root
    volumes:
      - ./werfplanning/db_data:/var/lib/mysql
    networks:
      - mynetwork  

  calculatie_api:
    container_name: calculatie_api
    restart: unless-stopped
    build:
      context: ./calculatie/gRPC_server
      dockerfile: Dockerfile
    ports:
      - "30002:50051"
    depends_on:
      - calculatie_db
    environment:
      - DB_HOST=calculatie_db
      - DB_PORT=3306
      - DB_DATABASE=calculatieAPI
      - DB_USERNAME=calculatie
      - DB_PASSWORD=calculatiePwd
    volumes:
      - ./calculatie/gRPC_server/app:/app
    networks:
      - mynetwork  

  calculatie_db:
    image: mariadb:10.6.19-focal
    container_name: calculatie_db
    restart: unless-stopped
    environment:
      - MARIADB_DATABASE=calculatieAPI
      - MARIADB_USER=calculatie
      - MARIADB_PASSWORD=calculatiePwd
      - MARIADB_ROOT_PASSWORD=root
    volumes:
      - ./calculatie/db_data:/var/lib/mysql
    networks:
      - mynetwork  

  calculatie_rest_layer:
    container_name: calculatie_REST_layer
    restart: unless-stopped
    build:
      context: ./calculatie/REST_layer
      dockerfile: Dockerfile
    ports:
      - "30006:5000"
    depends_on:
      - calculatie_db
    environment:
      - FLASK_APP=/app/app.py
      - FLASK_ENV=development
    volumes:
      - ./calculatie/REST_layer/app:/app
    networks:
      - mynetwork

  uurregistratie_api:
    container_name: uurregistratie_api
    restart: unless-stopped
    build:
      context: ./uurregistratie
      dockerfile: Dockerfile
    command: tail -f /dev/null  # Start de Flask-app
    ports:
      - "30003:5000"
    depends_on:
      - uurregistratie_db
    environment:
      - FLASK_APP=/app/app.py
      - FLASK_ENV=development
      - DB_HOST=uurregistratie_db
      - DB_PORT=3306
      - DB_DATABASE=uurregistratieAPI
      - DB_USERNAME=uurregistratie
      - DB_PASSWORD=uurregistratiePwd
    volumes:
      - ./uurregistratie/app:/app
    networks:
      - mynetwork  

  uurregistratie_db:
    image: mariadb:10.6.19-focal
    container_name: uurregistratie_db
    restart: unless-stopped
    environment:
      - MARIADB_DATABASE=uurregistratieAPI
      - MARIADB_USER=uurregistratie
      - MARIADB_PASSWORD=uurregistratiePwd
      - MARIADB_ROOT_PASSWORD=root
    volumes:
      - ./uurregistratie/db_data:/var/lib/mysql
    networks:
      - mynetwork  

  facturatie-api:
    container_name: facturatie-api
    restart: unless-stopped
    build:
      context: ./facturatie
      dockerfile: Dockerfile
    ports:
      - "30004:8080"
    environment:
    - SPRING_PROFILES_ACTIVE=prod
    networks:
      - mynetwork  

  stockbeheer_api:
    container_name: stockbeheer_api
    restart: unless-stopped
    build:
      context: ./stockbeheer
      dockerfile: Dockerfile
    ports:
      - "30005:30005"
    depends_on:
      - stockbeheer_db
    environment:
      - FLASK_APP=/app/app.py
      - FLASK_ENV=development
      - DB_HOST=stockbeheer_db
      - DB_PORT=3306
      - DB_DATABASE=stockbeheerAPI
      - DB_USERNAME=stockbeheer
      - DB_PASSWORD=stockbeheerPwd
    volumes:
      - ./stockbeheer/app:/app
    networks:
      - mynetwork  

  stockbeheer_db:
    image: mariadb:10.6.19-focal
    container_name: stockbeheer_db
    restart: unless-stopped
    environment:
      - MARIADB_DATABASE=stockbeheerAPI
      - MARIADB_USER=stockbeheer
      - MARIADB_PASSWORD=stockbeheerPwd
      - MARIADB_ROOT_PASSWORD=root
    volumes:
      - ./stockbeheer/db_data:/var/lib/mysql
    networks:
      - mynetwork  

  laravel_consume_api:
    image: bitnami/laravel:11-debian-12
    container_name: laravel_consume_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./laravel_consumer:/app
    command: tail -f /dev/null  # Laat de container gewoon oneindig draaien. Goed voor development omgeving.
    depends_on:
      - consume_api_db
    environment:
      - DB_HOST=consume_api_db
      - DB_PORT=3306
      - DB_DATABASE=consumeApi
      - DB_USERNAME=laravel
      - DB_PASSWORD=laravelPwd
    networks:
      - mynetwork  

  consume_api_db:
    image: mariadb:10.6.19-focal
    container_name: laravel_consume_api_db
    restart: unless-stopped
    environment:
      - MARIADB_DATABASE=consumeApi
      - MARIADB_USER=laravel
      - MARIADB_PASSWORD=laravelPwd
      - MARIADB_ROOT_PASSWORD=root
    volumes:
      - ./laravel_consumer/db_data:/var/lib/mysql:Z
    networks:
      - mynetwork  

  adminer:
    image: adminer:4.8.1-standalone
    container_name: adminer
    restart: unless-stopped
    ports:
      - "9092:8080"
    networks:
      - mynetwork 

  influxdb:
    image: influxdb:2
    container_name: werfmonitoring_influxdb
    ports:
      - 8086:8086
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=werfmonitoring_taak
      - DOCKER_INFLUXDB_INIT_BUCKET=timeseries
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admintoken
    volumes:
      - "./werfmonitoring/influxdb2_data/config:/etc/influxdb2"
      - "./werfmonitoring/influxdb2_data/data:/var/lib/influxdb2"
    networks:
      - mynetwork

  werfmonitoring_mqtt:
    build: 
      context: ./werfmonitoring/dummy_datasource
      dockerfile: Dockerfile
    container_name: werfmonitoring_mqtt
    depends_on:
      - mosquitto
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
    networks:
      - mynetwork
  
  mosquitto:
    image: eclipse-mosquitto
    container_name: werfmonitoring_mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./werfmonitoring/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - mynetwork

  telegraf:
    image: telegraf:latest
    container_name: werfmonitoring_telegraf
    depends_on:
      - influxdb
      - mosquitto
    environment:
      - INFLUX_TOKEN=admintoken
    volumes:
      - ./werfmonitoring/telegraf_taak.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana:latest
    container_name: werfmonitoring_grafana
    volumes:
      - ./werfmonitoring/grafana_data:/var/lib/grafana
      - ./werfmonitoring/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - 3000:3000
    depends_on:
      - influxdb
    networks:
      - mynetwork

networks:
  mynetwork: 
    driver: bridge
